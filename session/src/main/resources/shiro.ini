#替换SecurityManager默认的SessionManager
[main]
sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager
securityManager.sessionManager=$sessionManager

#设置会话的全局过期时间（毫秒为单位），默认30分钟：
sessionManager.globalSessionTimeout=1800000

#另外如果使用ServletContainerSessionManager进行会话管理，
#Session的超时依赖于底层Servlet容器的超时时间，可以在web.xml中配置其会话的超时时间（分钟为单位）：
#<session-config>
# <session-timeout>30</session-timeout>
#</session-config>


#在Servlet容器中，默认使用JSESSIONID Cookie维护会话，且会话默认是跟容器绑定的；
#在某些情况下可能需要使用自己的会话机制，此时我们可以使用DefaultWebSessionManager来维护会话：

#sessionIdCookie是sessionManager创建会话Cookie的模板：
sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie
sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager
#sessionIdCookie.name：设置Cookie名字，默认为JSESSIONID;
sessionIdCookie.name=sid  
#sessionIdCookie.domain：设置Cookie的域名，默认空，即当前访问的域名;
#sessionIdCookie.domain=sishuok.com  
#sessionIdCookie.path：设置Cookie的路径，默认空，即存储在域名根下
#sessionIdCookie.path=
#sessionIdCookie.maxAge：设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie 
sessionIdCookie.maxAge=1800
#sessionIdCookie.httpOnly：如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；
#此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持；
sessionIdCookie.httpOnly=true  
sessionManager.sessionIdCookie=$sessionIdCookie
#sessionManager.sessionIdCookieEnabled：是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。
sessionManager.sessionIdCookieEnabled=true  
securityManager.sessionManager=$sessionManager
#另外我们可以如“sessionManager. sessionIdCookie.name=sid”这种方式操作Cookie模板。


#可以通过如下配置设置SessionDAO：
sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO  
sessionManager.sessionDAO=$sessionDAO  